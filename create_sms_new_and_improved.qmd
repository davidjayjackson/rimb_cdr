---
title: New and Improved Num of Text Send
format: pdf
jupyter: python3
---
```{python}
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns


# Define the number of rows
num_rows = 100000

# Generate random values for each column
id_cust = np.random.randint(1, 1001, size=num_rows)
id_sms = np.random.randint(1, 4, size=num_rows)
start_date = datetime(2023, 10, 1)
end_date = datetime(2023, 12, 31)
date_range = end_date - start_date
date_list = [start_date + timedelta(days=np.random.randint(date_range.days)) for _ in range(num_rows)]

# Assign different probability distributions for num_text based on ID_CUST
num_text = np.zeros(num_rows)
for i in range(1, 11):  # Create 10 different ranges of ID_CUST
    mask = (id_cust >= (i - 1) * 100) & (id_cust < i * 100)
    num_text[mask] = np.random.randint(2*i, 51, size=np.sum(mask))

# Create the DataFrame
FACT_SMS = pd.DataFrame({
    'ID_CUST': id_cust,
    'ID_SMS': id_sms,
    'DATE': date_list,
    'NUM_TEXT': num_text.astype(int)  # Convert to integer type
})
# Print the first few rows of the DataFrame
FACT_SMS['NUM_TEXT'].describe()
```
# Begin EDA

```{python}
sns.histplot(x='NUM_TEXT',data=FACT_SMS)
```
```{python}
import seaborn as sns
sns.boxplot(x='NUM_TEXT',data=FACT_SMS)
```
```{python}


# Generate FACT_SMS DataFrame (assuming you've already created it)
# Replace this code with the code to create FACT_SMS DataFrame if you haven't done it yet

# Assuming FACT_SMS is already created, let's proceed to plot the number of texts by day

# Group the data by date and sum the number of texts for each day
texts_by_day = FACT_SMS.groupby('DATE')['NUM_TEXT'].sum()

# Plot the number of texts by day
plt.figure(figsize=(10, 6))
texts_by_day.plot()
plt.title('Number of Texts by Day')
plt.xlabel('Date')
plt.ylabel('Number of Texts')
plt.grid(True)
plt.show()
```
```{python}


# Aggregate the data by phone number and calculate the total number of text messages for each phone number
phone_totals = FACT_SMS.groupby('ID_CUST')['NUM_TEXT'].sum().sort_values(ascending=False)

# Select the top 10 phones with the most text messages
top_10_phones = phone_totals.head(10)

# Plot the top 10 phones horizontally
plt.figure(figsize=(10, 6))
top_10_phones.plot(kind='barh', color='skyblue')
plt.title('Top 10 Phones with the Most Text Messages')
plt.ylabel('Phone Number')
plt.xlabel('Total Number of Text Messages')
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

```
```{python}

# Convert the 'DATE' column to datetime format
FACT_SMS['DATE'] = pd.to_datetime(FACT_SMS['DATE'])

# Aggregate the data by day and calculate the average number of text messages for each day
daily_avg_text = FACT_SMS.groupby('DATE')['NUM_TEXT'].mean()

# Plot the average text messages per day
plt.figure(figsize=(10, 6))
daily_avg_text.plot(kind='line', color='green')
plt.title('Average Text Messages Sent per Day')
plt.xlabel('Date')
plt.ylabel('Average Number of Text Messages')
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

```
```{python}

# Convert the 'DATE' column to datetime format
FACT_SMS['DATE'] = pd.to_datetime(FACT_SMS['DATE'])

# Extract the day of the week
FACT_SMS['Day_of_Week'] = FACT_SMS['DATE'].dt.day_name()

# Aggregate the data by day of the week and calculate the total number of messages for each day
messages_by_day_of_week = FACT_SMS.groupby('Day_of_Week')['NUM_TEXT'].sum()

# Plot the number of messages sent by day of the week
plt.figure(figsize=(10, 6))
messages_by_day_of_week.plot(kind='bar', color='orange')
plt.title('Number of Messages Sent by Day of Week')
plt.xlabel('Day of Week')
plt.ylabel('Total Number of Messages')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
```
```{python}
FACT_SMS.to_csv('FACT_SMS.csv',index=False)
```
